testroom = '''PH_hive
48*35
0.0000*1.0000|0|0
-220,-40
Border: Passable




0

1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1,4,3|1|1|1|1|1|1|1|1|1|1,5,3|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1,3|1|1|1|1|1|1|1|1|1|1,3|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|4,3,6|1|1|1|1|1|1|1|1|1|4,3,6|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0,6|1|1|1|1|1|1|1|1|1|0,6|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,6|0,6|3,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|2,6|1|1|1|1|1|1|1|1|1|1|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|1|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|3,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|3,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|3,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|3,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|1|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|1|1|1|1|1|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,6|0,6|1|2,6|0,6|0,6|0,6|0,6|0,6|0,6|1|2,6|0,6|0,6|0,6|0,6|1|2,6|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,6|0,7,6|1|1|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,6|0,7,6|1|1|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,6|0,7,6|1|1|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|4,3,6|1,3|1,5,3|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,6|0,7,6|1|1|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,6|0,7,6|1|1|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,6|0,7,6|1|1|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|1|1|1|1|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|1|2,6|0,6|0,6|0,6|0,6|0,6|0,6|1|2,6|0,6|0,6|0,6|0,6|1|2,6|0,6|0,6|0,6|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,11,6|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|1|2,6|0,6|0,6|0,6|0,6|0,6|1|2,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|1|1|2,6|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,6|1|1|1|2,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|0,11,6|1|1|0,6|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,7,6|1|1|1|1|0,6|0,6|0,6|0,6|1|2,1,6|0,6|0,6|0,6|0,6|0,6|1|2,6|0,6|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,7,6|1|1|1|1|0,6|0,6|0,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|3,1,6|0,1,6|0,1,6|0,1,6|0,1,6|0,1,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,7,6|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|1|1|1|1|1|1|1|1|1|1|0,6|0,6|0,6|0,7,6|1|1|1|1|1|0,6|0,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|4,3,6|1,3|1,3|1|1|1|1|1|1|0,6|0,6|0,6|0,7,6|1|1|1|1|1|2,6|0,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|1|1|1|1,3|1|1|1|1|1|2,6|0,6|0,6|0,6|0,7,6|1|1|1|1|1|1|2,6|0,6|0,2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1,3|1|1|1|1|1|0,6|0,6|0,6|0,6|0,7,6|1|1|1|1|1|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|0,6|2,6|1|1|1|1|1,3|1|1|1|1|1|0,6|0,6|0,6|0,6|0,7,6|1|1|1|1|1|1|1|1|1|1|1|2,6|0,6|0,6|0,6|0,6|0,6|0,11,6|1|1|1|1|1|1|1,3|1|1|1|1|1|2,6|0,6|0,6|0,6|0,7,6|1|1|1|1|1|1|1|1|1|1|1|1|2,6|0,6|0,6|2,6|1|1|1|1|1|1|1|1|1,3|1|1|1|1|1|1|1|0,6|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1,3|1|1|1|1|1|1|1|4,3,6|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1,3|1|1|1|1|1|1|1|1,3|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1,3|1,5,3|1,3|1,3|1,3|1,3|1,3|1,3|1,3|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1,4,3|
'''

with open('abcd.txt', 'wt') as f: f.write('')

def log(content):
    with open('abcd.txt', 'at') as f: f.write(str(content) + '\n')

def listtonum(list: list | tuple):
    out = []
    for l in list:
        if type(l) == bool: out.append(int(l))
        else:
            if l.removeprefix('-').isdigit(): out.append(int(l))
            elif '.' in l and l.removeprefix('-').replace('.', '', 1).isdigit(): out.append(float(l))
            else: out.append(l)
    return tuple(out) if type(list) == tuple else out

def partitionroom(room: str):
    room = room.strip().split('\n')
    name = room[0].strip()
    dimensions = tuple(room[1].split('|')[0].strip().split('*'))
    dimensions = int(dimensions[0]), int(dimensions[1])
    geo = room[11].strip('|').split('|')
    geocopy = geo
    geo = []
    gl = []
    glc = 0
    for g in geocopy:
        if glc >= dimensions[0]: glc = 0; geo.append(gl); gl = []
        gl.append(g)
        glc += 1
    return geo#name, dimensions, geo


def parsetile(tile: str):
    prevtile = tile
    if ',' in tile:
        stile = tile.split(',')
        #print(prevtile, ':', stile)
        prevtile += '(' + stile[0] + ')'
        if stile[0] in ('1', '2', '3', '4'): tile = '1'
        else: tile = '0'
        if stile[1] in ('3', '4', '5', '9', '6', '12'): tile = '1'
    if tile in ('1', '2', '3', '4'): tile = '1'
    else: tile = '0'
    log(prevtile + ' : ' + tile)
    return tile


def roomtorgbl(proom: tuple[str, tuple[int, int], tuple[tuple[str]]]):
    #proom = proom[2]
    out = []
    for line in proom:
        o = []
        for tile in line:
            tile = parsetile(tile)
            if tile == '1': o.append((0, 0, 0)) #(255, 255, 255))
            else: o.append((255, 255, 255)) #(0, 0, 0))
        out.append(o)
    return out